// GENERATED C++ CODE FROM PathGen 3.5.3
// Exported: Thu Feb  9 20:36:33 2023

// Robot assumes a starting position of (9.4,114.3) at heading of 0.0 degrees.
robot.localizer->setHeading(getRadians(0.0));
setShootDistance(robot, 101.40524637477658, 0, false); // Preemptively set speed for next shot
setEffort(*robot.intake, 1); // Start running intake immediately
robot.drive->setBrakeMode(pros::E_MOTOR_BRAKE_BRAKE);


//Comment to make roller back not error


// Back up and do rollers using drivetrain current detection
{
robot.drive->setEffort(-0.3, -0.3);
robot.roller->move_velocity(100);
uint32_t endTime = pros::millis() + 2000;
while (robot.drive->getCurrent() < 1.2 && pros::millis() < endTime) pros::delay(10);
robot.roller->brake();
robot.drive->stop();
}

goForwardU(robot, GFU_DIST_PRECISE(1), GFU_TURN, 6.54, getRadians(0.0));
goTurnU(robot, GTU_TURN, getRadians(41.0));
goForwardU(robot, GFU_DIST_PRECISE(1), GFU_TURN, 15.6, getRadians(41.0));
goTurnU(robot, GTU_TURN_PRECISE, getRadians(269.9));
/*goForwardU(robot, GFU_DIST_PRECISE(1), GFU_TURN, -13.83, getRadians(269.9));*/

// Back up and do rollers using drivetrain current detection
{
robot.drive->setEffort(-0.3, -0.3);
robot.roller->move_velocity(100);
uint32_t endTime = pros::millis() + 2000;
while (robot.drive->getCurrent() < 1.2 && pros::millis() < endTime) pros::delay(10);
robot.drive->setEffort(-0.1, -0.1);
pros::delay(220);
robot.roller->brake();
robot.drive->stop();
}

goForwardU(robot, GFU_DIST_PRECISE(1), GFU_TURN, 4.44, getRadians(269.9));
goTurnU(robot, GTU_TURN_PRECISE, getRadians(-2.81));

shoot(robot);

goTurnU(robot, GTU_TURN_PRECISE, getRadians(235.87));
goForwardU(robot, GFU_DIST_PRECISE(1), GFU_TURN, 12.11, getRadians(235.87));
goTurnU(robot, GTU_TURN_PRECISE, getRadians(312.77));
goForwardU(robot, GFU_DIST_PRECISE(1), GFU_TURN, 3.9, getRadians(312.77));
// ================================================

